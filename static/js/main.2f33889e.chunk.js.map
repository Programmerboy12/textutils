{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","Alert","alert","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","document","getElementById","select","navigator","clipboard","writeText","split","length","App","setMode","setAlert","showAlert","message","setTimeout","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2f33889e.chunk.js","sourcesContent":["import React from 'react'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"/navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                        <ul className=\"navbar-nav\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" href=\"/blog\">Blog</Link>\r\n                            </li> */}\r\n                            {/* <li className=\"nav-item\">\r\n                                <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                            </li> */}\r\n\r\n                        </ul>\r\n                    </div>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" >\r\n                            Enable Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert","import React, { useState } from 'react'\r\n\r\n\r\n// The use a handleClick Function \r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText)\r\n  }\r\n  const handleLoClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText)\r\n  }\r\n  const handleClearClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newText = (\"\");\r\n    setText(newText)\r\n  }\r\n\r\n  const handleCopy = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    // setText(newText)\r\n  }\r\n  // const handleDownText = ()=>{\r\n\r\n  //   const element = document.createElement(\"a\");\r\n  //  const file = new Blob([document.getElementById('myInput').value], {type: 'text/plain'});\r\n  //  element.href = URL.createObjectURL(file);\r\n  //  element.download = \"myFile.txt\";\r\n  //  document.body.appendChild(element); // Required for this to work in FireFox\r\n  //  element.click();\r\n  // }\r\n\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"on change\");\r\n    setText(event.target.value)\r\n  }\r\n\r\n  // The use state variante function use\r\n\r\n  const [text, setText] = useState('');\r\n  // text = \"new text\" ; wrong way to change the state\r\n  // setText = (\"new text\") ; Correct way to change the state\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\r\n        <h1>{props.heading} - </h1>\r\n        <div className=\"mb-3\">\r\n          <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === 'dark' ? 'grey' : 'white', color: props.mode === 'dark' ? 'white' : 'black' }} id=\"myBox\" rows=\"12\"></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick} >Convert To UpperCase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleLoClick} >Convert To LowerCase</button>\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleCopy} >Copy Text</button>\r\n\r\n\r\n        <button className=\"btn btn-primary mx-1\" onClick={handleClearClick} >Clear text</button>\r\n        {/* <button className=\"btn btn-primary mx-1\" onClick={handleDownText} >Download text</button> */}\r\n\r\n\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h2>Your text summary </h2>\r\n        <p>{text.split(\"2\").length} words and {text.length} charcter</p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n        <h2>Privew</h2>\r\n        <p>{text.length > 0 ? text : \"Enter something to priview in the box it here write\"}</p>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\n","\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport React, { useState } from 'react'\nimport TextForm from './components/TextForm';\n\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark')\n      showAlert(\"Dark Mode has Enable \", \"sucsess\");\n    }\n    else {\n      setMode('light')\n      showAlert(\"Light Mode has been enabled\");\n    }\n  }\n\n  return (\n\n    <>\n      {/* <Router> */}\n        <Navbar title=\"ShivamCode\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* /users component-1\n           /users/home components-2  */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route>\n            <Route exact path=\"/\">\n            </Route>\n          </Switch> */}\n        <TextForm heading=\"Enter the text to anylze below \" mode={mode} />\n       \n        </div>\n      {/* </Router> */}\n      {/* <About/> */}\n\n\n\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}